networks:
  monitoring:
    external: true
  # enable connection with Traefik
  traefik:
    external: true

volumes:
  prometheus:

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: "65534:65534"
      #user: "1000:1000"
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prometheus_data:/prometheus
     #- ./prometheus/alert.rules:/etc/prometheus/alert.rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=/prometheus'

    networks:
      - monitoring
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      # Get the routes from http
      - "traefik.http.routers.prometheus.rule=Host(`${DOMAIN}`) && PathPrefix(`/${DOMAINPATH}`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      # Redirect these routes to https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.prometheus.middlewares=redirect-to-https@docker"
      # Get the routes from https
      - "traefik.http.routers.prometheus-secured.rule=Host(`${DOMAIN}`) && PathPrefix(`/${DOMAINPATH}`)"
      - "traefik.http.routers.prometheus-secured.entrypoints=web-secure"
      # Apply autentificiation with http challenge
      - "traefik.http.routers.prometheus-secured.tls=true"
      - "traefik.http.routers.prometheus-secured.tls.certresolver=myhttpchallenge"
      # Get service on 9090 port
      - traefik.http.routers.prometheus.service=prometheus
      - traefik.http.services.prometheus.loadbalancer.server.port=9090

  #alertmanager: 
    #image: prom/alertmanager
    #container_name: alertmanager
    #volumes: 
    #  - ./alertmanager:/etc/alertmanager/:ro
    #ports: 
    #  - 9093:9093
    #command: 
    #  - --config.file=/etc/alertmanager/alertmanager.yml
    #networks:
    #  - monitoring
    #depends_on:
    #  - prometheus

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "472:0"
    volumes:
      - ./grafana:/var/lib/grafana
        #- ./grafana:/grafana/data/grafana.db
    restart: unless-stopped
    networks:
      - monitoring
      - traefik
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      # Get the routes from http
      - "traefik.http.routers.grafana.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      # Redirect these routes to https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.grafana.middlewares=redirect-to-https@docker"
      # Get the routes from https
      - "traefik.http.routers.grafana-secured.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.grafana-secured.entrypoints=web-secure"
      # Apply autentificiation with http challenge
      - "traefik.http.routers.grafana-secured.tls=true"
      - "traefik.http.routers.grafana-secured.tls.certresolver=myhttpchallenge"
      # Get service on 3000 port
      - traefik.http.routers.grafana.service=grafana
      - traefik.http.services.grafana.loadbalancer.server.port=3000
