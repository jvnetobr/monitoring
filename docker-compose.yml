networks:
  monitoring:
  traefik:
    external: true

volumes:
  prometheus:

services:
  prometheus:
    image: prom/prometheus:v3.0.1
    container_name: prometheus
    user: "65534:65534"
      #user: "1000:1000"
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prometheus_data:/prometheus
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=/prometheus'
    networks:
      - monitoring
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      # Get the routes from http
      - "traefik.http.routers.prometheus.rule=Host(`${DOMAIN}`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      # Redirect these routes to https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.prometheus.middlewares=redirect-to-https@docker"
      # Get the routes from https
      - "traefik.http.routers.prometheus-secured.rule=Host(`${DOMAIN}`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus-secured.entrypoints=web-secure"
      # Apply autentificiation with http challenge
      - "traefik.http.routers.prometheus-secured.tls=true"
      - "traefik.http.routers.prometheus-secured.tls.certresolver=myhttpchallenge"
      # Get service on 9090 port
      - traefik.http.routers.prometheus.service=prometheus
      - traefik.http.services.prometheus.loadbalancer.server.port=9090

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
      - traefik

  alertmanager: 
    image: prom/alertmanager:v0.28.0
    container_name: alertmanager
    volumes: 
      - ./alertmanager:/etc/alertmanager/:ro
    #ports: 
      #- 9093:9093
    command: 
      - --config.file=/etc/alertmanager/alertmanager.yml
    networks:
      - monitoring
    depends_on:
      - prometheus

  node_exporter:
    image: prom/node-exporter:v1.8.2
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  grafana:
    image: grafana/grafana:11.5.0
    container_name: grafana
    user: "472:0"
    volumes:
      - ./grafana_data:/var/lib/grafana
        #- ./grafana:/grafana/data/grafana.db
    restart: unless-stopped
    networks:
      - monitoring
      - traefik
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      # Get the routes from http
      - "traefik.http.routers.grafana.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      # Redirect these routes to https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.grafana.middlewares=redirect-to-https@docker"
      # Get the routes from https
      - "traefik.http.routers.grafana-secured.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.grafana-secured.entrypoints=web-secure"
      # Apply autentificiation with http challenge
      - "traefik.http.routers.grafana-secured.tls=true"
      - "traefik.http.routers.grafana-secured.tls.certresolver=myhttpchallenge"
      # Get service on 3000 port
      - traefik.http.routers.grafana.service=grafana
      - traefik.http.services.grafana.loadbalancer.server.port=3000

  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./grafana/loki-config.yml:/etc/loki/loki-config.yml
    networks:
      - monitoring

  promtail:
    image: grafana/promtail
    container_name: promtail
    volumes:
      - ./grafana/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/log:/var/log
    networks:
      - monitoring

  tempo:
    image: grafana/tempo:2.7.0
    container_name: tempo
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
    volumes:
      #- ./grafana/tempo-config.yml:/etc/tempo/tempo.yml
      - ./grafana/tempo-config.yml:/etc/tempo/tempo-config.yml
      - ./tempo_data:/var/tempo
    command: ["-config.file=/etc/tempo/tempo-config.yml"]
    networks:
      - monitoring

  otel-collector:
    image: otel/opentelemetry-collector
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4319:4317"
      - "4320:4318"
    networks:
      - monitoring